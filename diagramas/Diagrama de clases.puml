@startuml
'https://plantuml.com/object-diagram

package TableroGame {
    class Tablero {
        fila: int
        columna: int
        crearMatriz(fila, columna)
        asignarPosicionObjeto(fila, columna)
        max3elementos()
        eliminarElemento(celda)
        botonStart()
        botonStop()
        introducirParam()
    }

    class BucleDeControl {
            - static final Logger log
            - estudiantes: ListaEnlazada<Estudiante>
            - recursos: ListaEnlazada<Recursos>
            - dato: DatosJuego
            - tablero: Tablero
            - celda: Celda
            - turno: boolean
            - propiedades: BucleDeControlProperties
            + BucleDeControl(tablero: Tablero, dato: DatosJuego)
            + getTablero(): Tablero
            + setTablero(tablero: Tablero): void
            + getDatos(): DatosJuego
            + setDatos(dato: DatosJuego): void
            + isTurno(): boolean
            + setTurno(turno: boolean): void
            + getCelda(): Celda
            + setCelda(celda: Celda): void
            + getCelda(posicionN: int, posicionM: int): Celda
            + evaluarMejoras(): void
            + actualizarTiempoDeVidaEstudiante(): void
            + actualizarTiempoDeAparicionDeRecursos(): void
            + moverEstudiantes(): void
            + evaluarReproduccion(): void
            + evaluarClonacion(): void
            + evaluarDesaparicionEstudiantes(): void
            + generarNuevoRecurso(id: int, posicionN: int, posicionM: int, dato: DatosJuego): Recursos
            + evaluarAparicionRecursos(): void
            + condicionFinalizacion(): boolean
            + ejecutarBucle(): void
            + run(): void
        }
        class BucleDeControlProperties {
                - static final Logger log
                - original: BucleDeControl
                - dato: DatosJuego
                - tableroColumnas: IntegerProperty
                - tableroFilas: IntegerProperty
                - turnoProperty: IntegerProperty
                + BucleDeControlProperties(original: BucleDeControl)
                + commit(): void
                + rollback(): void
                + getOriginal(): BucleDeControl
                + setOriginal(original: BucleDeControl): void
                + tableroColumnasProperty(): IntegerProperty
                + tableroFilasProperty(): IntegerProperty
                + actualizarTurnoProperty(): void
                + getTurnoProperty(): IntegerProperty
                + setTurnoProperty(turnoProperty: Integer): void
                + getFilas(): int
                + getColumnas(): int
                + getCelda(): Celda
            }
}

package EstructurasDatos {
    class ArbolBinario {
        -raiz:NodoArbol
        +isVacia():boolean
        -add(dato:TipoDelDato, raiz NodoArbol)
        +add(dato:TipoDelDato)
        +getGrado(nodo:NodoArbol, int:result):int
        -getCamino(nodo:NodoArbol, raiz:NodoArbol, lista:ListaEnlazada):ListaEnlazada
        +getCamino(nodo:NodoArbol)
        +getLongitud(nodo:NodoArbol)
        +getSubArbolIzquierda():ArbolBinarioDeBusqueda
        +getSubArbolDerecha():ArbolBinarioDeBusqueda
        -getListaPreOrden(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
        +getListaPreOrden():ListaEnlazada
        -getListaPostOrden(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
        +getListaPostOrden():ListaEnlazada
        -getListaOrdenCentral(nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
        +getListaOrdenCentral():ListaEnlazada
        -getAltura(nodo:NodoArbol, p:int):int
        +getAltura():int
        +getListaDatosNivel(nivel:int, nodo:NodoArbol, lista:ListaEnlazada):ListaEnlazada
        +getListaDatosNivel(nivel:int):ListaEnlazada
        -isArbolCompleto(nodo:NodoArbol):boolean
        +isArbolHomogeneo():Boolean
        -isArbolCompleto(nodo:NodoArbol, numero:int):Boolean
        +isArbolCompleto():Boolean
        -isArbolCasiCompleto(nodo:NodoArbol, numero:int):Boolean
        +isArbolCasiCompleto():Boolean
    }

    class NodoArbol {
        -derecha:NodoArbol
        -izquierda:NodoArbol
        -dato:TipoDelDato
        +getDerecha():NodoArbol
        +setDerecha(nodo:NodoArbol)
        +getIzquierda():NodoArbol
        +setIzquierda(nodo:NodoArbol)
        +getDato():TipoDelDato
        +setDato(dato:TipoDelDato)
        +gradoNodo():int
        +esHoja():boolean
    }

    class ListaEnlazada {
        -primero:ElementoLE
        +isVacia():boolean
        +vaciar()
        -add(el:ElementoLE):int
        +add(s:String)
        +add(o:Object)
        +insert(s:String,posicion:int)
        +insert(o:Object,posicion:int)
        +del(posicion:int):int
        +getNumeroElementos():int
        +getPosicion(el:ElementoLE):int
        +getPrimero():ElementoLE
        +getUltimo():ElementoLE
        +getSiguiente(el:ElementoLE):ElementoLE
        +getElemento(posicion:int):ElementoLE
    }

    class ElementoLE {
        -siguiente:ElementoLE
        -data:Object
        -insertarmeEn(el:ElementoLE)
        -getSiguiente():ElementoLE
        +getData():Object
        +setData():Object
    }

    class Cola {
        -cabeza:ElementoLE
        -cola:ElementoLE
        +esVacia():boolean
        +push(el:ElementoLE)
        +pop():ElementoLE
    }
}

package entorno {
    class Entorno {
        maximo3
    }

    class RecursosProperties {
            - original: Recursos
            - turnosRestantes: IntegerProperty
            - posicionN: IntegerProperty
            - posicionM: IntegerProperty
            - probRecurso: DoubleProperty
            + RecursosProperties(original: Recursos)
            + getOriginal(): Recursos
            + setOriginal(original: Recursos): void
            + rollback(): void
            + commit(): void
            + turnosRestantesProperty(): Property<Number>
            + posicionNProperty(): Property<Number>
            + posicionMProperty(): Property<Number>
            + probRecursoProperty(): Property<Number>
        }

    abstract class Recursos {
            - static log: Logger
            - id: int
            - posicionN: int
            - posicionM: int
            - turnosRestantes: int
            - probRecurso: double
            + Recursos(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double)
            + Recursos(id: int, posicionN: int, posicionM: int, turnosRestantes: int)
            + Recursos(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + Recursos()
            + getId(): int
            + setId(id: int): void
            + getPosicionN(): int
            + setPosicionN(posicionN: int): void
            + getPosicionM(): int
            + setPosicionM(posicionM: int): void
            + getPosicion(): int[]
            + setPosicion(posicion: int[]): void
            + getTurnosRestantes(): int
            + setTurnosRestantes(turnosRestantes: int): void
            + getProbRecurso(): double
            + setProbRecurso(probRecurso: double): void
            + add(dato: DatosJuego, celda: Celda): void
            + del(dato: DatosJuego, celda: Celda): void
            + actualizarTurnos(dato: DatosJuego, celda: Celda): boolean
            + abstract getTipo(): Class<?>
            + abstract aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }

    class ParameterAguaProperties {
            - originalAgua: Agua
            - turnosRestantes: IntegerProperty
            - aumentoVida: IntegerProperty
            - probAgua: DoubleProperty
            + ParameterAguaProperties(original: Agua)
            + commit(): void
            + rollback(): void
            + getOriginalAgua(): Agua
            + setOriginalAgua(originalAgua: Agua): void
            + turnosRestantesProperty(): IntegerProperty
            + aumentoVidaProperty(): IntegerProperty
            + probAguaProperty(): DoubleProperty
        }

    class Agua {
            - aumentoVida: int
            - static probAgua: double
            - static logger: Logger
            + Agua(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double, aumentoVida: int, probAgua: double)
            + Agua(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + Agua()
            + Agua(probAgua: double)
            + getAumentoVida(): int
            + setAumentoVida(aumentoVida: int): void
            + getProbAgua(): double
            + setProbAgua(probAgua: double): void
            + getTipo(): Class<Agua>
            + aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }

    class ParameterComidaProperties {
            - original: Comida
            - turnosRestantes: IntegerProperty
            - aumentoVida: IntegerProperty
            - probComida: DoubleProperty
            + ParameterComidaProperties(original: Comida)
            + commit(): void
            + rollback(): void
            + getOriginal(): Comida
            + setOriginal(original: Comida): void
            + turnosRestantesProperty(): IntegerProperty
            + aumentoVidaProperty(): IntegerProperty
            + probComidaProperty(): DoubleProperty
        }

    class Comida {
            - aumentoVida: int
            - static probComida: double
            - static logger: Logger
            + Comida(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double, aumentoVida: int, probComida: double)
            + Comida()
            + Comida(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + Comida(probComida: double)
            + getAumentoVida(): int
            + setAumentoVida(aumentoVida: int): void
            + getProbComida(): double
            + setProbComida(probComida: double): void
            + getTipo(): Class<Comida>
            + aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }

    class ParameterMontanaProperties {
            - original: Montaña
            - turnosRestantes: IntegerProperty
            - disminucionVida: IntegerProperty
            - probMontaña: DoubleProperty
            + ParameterMontanaProperties(original: Montaña)
            + commit(): void
            + rollback(): void
            + getOriginal(): Montaña
            + setOriginal(original: Montaña): void
            + turnosRestantesProperty(): IntegerProperty
            + disminucionVidaProperty(): IntegerProperty
            + probMontañaProperty(): DoubleProperty
        }

    class Montaña {
            - reduccionVida: int
            - static probMontaña: double
            - static logger: Logger
            + Montaña(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double, reduccionVida: int, probMontaña: double)
            + Montaña(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + Montaña()
            + Montaña(probMontaña: double)
            + getReduccionVida(): int
            + setReduccionVida(reduccionVida: int): void
            + getProbMontaña(): double
            + setProbMontaña(probMontaña: double): void
            + getTipo(): Class<Montaña>
            + aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }

    class ParameterTesoroProperties {
            - original: Tesoro
            - turnosRestantes: IntegerProperty
            - aumentoPorcentajeRep: DoubleProperty
            - probTesoro: DoubleProperty
            + ParameterTesoroProperties(original: Tesoro)
            + commit(): void
            + rollback(): void
            + getOriginal(): Tesoro
            + setOriginal(original: Tesoro): void
            + turnosRestantesProperty(): IntegerProperty
            + aumentoPorcetajeRepProperty(): DoubleProperty
            + probTesoroProperty(): DoubleProperty
        }

    class Tesoro {
            - aumentoProbReproduccion: double
            - static probTesoro: double
            - static logger: Logger
            + Tesoro(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double, aumentoProbReproduccion: double, probTesoro: double)
            + Tesoro()
            + Tesoro(probTesoro: double)
            + Tesoro(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + getAumentoProbReproduccion(): double
            + setAumentoProbReproduccion(aumentoProbReproduccion: double): void
            + getProbTesoro(): double
            + setProbTesoro(probTesoro: double): void
            + getTipo(): Class<Tesoro>
            + aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }

    class ParameterBibliotecaProperties {
            - original: Biblioteca
            - turnosRestantes: IntegerProperty
            - aumentoPorentajeClon: DoubleProperty
            - probBilio: DoubleProperty
            + ParameterBibliotecaProperties(original: Biblioteca)
            + commit(): void
            + rollback(): void
            + getOriginal(): Biblioteca
            + setOriginal(original: Biblioteca): void
            + turnosRestantesProperty(): IntegerProperty
            + aumentoPorentajeClonProperty(): DoubleProperty
            + probBibliotecaProperty(): DoubleProperty
        }

    class Biblioteca {
            - aumentoProbClonacion: double
            - static probBiblioteca: double
            - static logger: Logger
            + Biblioteca(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double, aumentoProbClonacion: double, probBiblioteca: double)
            + Biblioteca()
            + Biblioteca(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + Biblioteca(probBiblioteca: double)
            + getAumentoProbClonacion(): double
            + setAumentoProbClonacion(aumentoProbClonacion: double): void
            + getProbBiblioteca(): double
            + setProbBiblioteca(probBiblioteca: double): void
            + getTipo(): Class<Biblioteca>
            + aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }

    class ParameterPozoProperties {
            - original: Pozo
            - turnosRestantes: IntegerProperty
            - probPozo: DoubleProperty
            + ParameterPozoProperties(original: Pozo)
            + commit(): void
            + rollback(): void
            + getOriginal(): Pozo
            + setOriginal(original: Pozo): void
            + turnosRestantesProperty(): IntegerProperty
            + probPozoProperty(): DoubleProperty
        }

    class Pozo {
            - static probPozo: double
            - static logger: Logger
            + Pozo(id: int, posicionN: int, posicionM: int, turnosRestantes: int, probRecurso: double, probPozo: double)
            + Pozo()
            + Pozo(id: int, posicionN: int, posicionM: int, dato: DatosJuego)
            + Pozo(probPozo: double)
            + getProbPozo(): double
            + setProbPozo(probPozo: double): void
            + getTipo(): Class<Pozo>
            + aplicarEfecto(estudiante: Estudiante, celda: Celda): void
        }
}

package individuos {
    class Individuos {
        Individuos():void
        -identiticador:int
        -generacion:int
        -turno_vida:int
        -probabilidad_reproduccion:int
        -probabilidad_clonacion:int
        -probabilidad_muerte:int
        +abstract moverse()
        +abstract reproduccion_entre_iguales()
        +reproduccion_entre_distintos()
        +restar_turno_vida()
        +cambiar_prob_reproduccion()
        +cambiar_prob_clonacion()
    }

    class IndBasico {
        +moverse_en_celda()
    }

    class IndNormal {
        +moverse_en_celda()
    }

    class IndAvanzados {
        +moverse_en_celda()
    }
}

class JSON {
    guardarArchivo()
    cargarArchivo()
}

class Grafo {}

Individuos "0,1,2,3" --o BucleDeControl
Entorno "0,1,2,3" --o BucleDeControl
Tablero "NxM" --o BucleDeControl

IndAvanzados --|> Individuos
IndBasico --|> Individuos
IndNormal --|> Individuos

Recursos --|> Entorno
Agua ---|> Recursos
Montaña ---|> Recursos
Comida --|> Recursos
Tesoro --|> Recursos
Biblioteca ---|> Recursos
Pozo --|> Recursos

ElementoLE --> Cola
NodoArbol --> ArbolBinario
ArbolBinario --|> JSON
ListaEnlazada --|> JSON
Grafo --|> JSON
Cola --|> JSON
Individuos <-- ArbolBinario

ElementoLE --> ElementoLE:siguiente
ListaEnlazada -left-> ElementoLE:primero

@enduml
