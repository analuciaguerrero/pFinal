@startuml

abstract class individuo {
    - posicionX: int
    - posicionY: int
    - id: int
    - generacion: int
    - TiempoDeVidaProperty: IntegerProperty
    - probReproduccion: int
    - probClonacion: int
    - probMuerte: int
    --
    + individuo(I:int, G:int, T:int,PR:float,PC:float)
    + individuo(id:int, posicionX:int, posicionY:int, generacion:int, tiempoDeVida:int,probReproduccion:float,probClonacion:float)
    + individuo(individuo:individuo)
    + {abstract} getTipo(): abstract Class<T>
    + getGradoTipo(): int
    + reproducirse(pareja:individuo,model:configuracionDataModel,casillaActual:casillaTablero)
    - getProbMejora(individuoSuperior:individuo, model:configuracionDataModel)
    + clonarse(model:configuracionDataModel,casillaActual: casillaTablero)
    + añadir(model:configuracionDataModel,casillaActual:casillaTablero)
    + morir(model:configuracionDataModel, casillaActual:casillaTablero)
    + actualizarTV(model:configuracionDataModel,tablero:tablero)
    + {abstract} mover(model: configuracionDataModel, tablero: tablero)
    # moverAleatorio(tablero: tablero)
    # cambiarPosicion(nuevaPosicionX: int,nuevaPosicionY: int,(tablero: tablero)
}

class individuoBasico extends individuo {
    --
    + individuoBasico(I:int,G:int, T:int, PR:float, PC:float)
    + individuoBasico(I:int, PX:int, PY:int, G:int, TV:int, PR:float, PC:float)
    + individuoBasico(individuo:individuo)
    + getTipo():Class<individuoBasico>
    + mover(model:configuracionDataModel, (tablero: tablero))
}

class individuoNormal extends individuo {
    --
    + individuoNormal(I:int,G:int, T:int, PR:float, PC:float)
    + individuoNormal(I:int, PX:int, PY:int, G:int, TV:int, PR:float, PC:float)
    + individuoNormal(individuo:individuo)
    + getTipo():Class<individuoNormal>
    + mover(model:configuracionDataModel, (tablero: tablero))
}

class individuoAvanzado extends individuo {
    --
    + individuoAvanzado(I:int,G:int, T:int, PR:float, PC:float)
    + individuoAvanzado(I:int, PX:int, PY:int, G:int, TV:int, PR:float, PC:float)
    + individuoAvanzado(individuo:individuo)
    + getTipo():Class<individuoNormal>
    + mover(model:configuracionDataModel, (tablero: tablero))
}

abstract class recurso {
    - id:int
    - posicionX: int
    - posicionY: int
    - tiempoDeAparicion: IntegerProperty
    --
    + recurso()
    + recurso(id:int, T:int)
    + recurso(id:int, posicionX: int, posicionY:int, tiempoDeAparicion:int)
    + {abstract} getTipo(): Class<T>
    + añadir(model:configuracionDataModel, casillaActual:casillaTablero)
    + eliminar(model:configuracionDataModel, casillaActual:casillaTablero)
    + actualizarTA(model:configuracionDataModel, casillaActual:casillaTablero)
    + {abstract} aplicarMejora(individuo:individuo, casillaActual:casillaTablero)
}

class agua extends recurso {
    - incrementoTV: int
    --
    + agua()
    + agua(id:int,T:int)
    + agua(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<agua>
}

class comida extends recurso {
    - incrementoTV: int
    --
    + comida()
    + comida(id:int,T:int)
    + comida(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<comida>
}

class montaña extends recurso {
    - incrementoTV: int
    --
    + montaña()
    + montaña(id:int,T:int)
    + montaña(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<montaña>
}

class pozo extends recurso {
    --
    + pozo()
    + pozo(id:int,T:int)
    + pozo(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<pozo>
}

class biblioteca extends recurso {
    - incrementoProbClonacion: float
    --
    + biblioteca()
    + biblioteca(id:int,T:int)
    + biblioteca(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<biblioteca>
}

class tesoro extends recurso {
    - incremento: int
    --
    + tesoro()
    + tesoro(id:int,T:int)
    + tesoro(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<tesoro>
}

abstract class casillaTablero {
    - posicionX: int
    - posicionY: int
    - model: DataModel
    - tablero:tablero
    - individuos:ListaEnlazada<individuo>
    - recursos: ListaEnlazada<recurso>
    - botonCasilla:Button
    - GridPane:GridPane
    --
    + casillaTablero(x:int, y:int,model:DataModel,tablero:tablero)
    - columnaConPorcentajes(porcentaje:double): ColumnConstrains
    - filaConPorcentajes(porcentaje:double): RowConstrains
    + addIndividuo(individuo:individuo,nuevoIndividuo:boolean)
    - addIconoIndividuo(vistaIcono:ImageView)
    + delIndividuo(individuo:individuo)
    + addRecurso(recurso:recurso,nuevoRecurso:boolean)
    - addIconoRecurso(vistaIcono:ImageView)
    + delRecurso(recurso:recurso)
    + resetVisual()
}

abstract class tablero implements casillaTablero {
    - casillas: ListaSimple<ListaSimple<casillaTablero>>
    --
    + tablero(n:int, m:int, model:DataModel)
    + getCasilla(n:int, m:int):casillaTablero
    + getCasilla(posicion:int[]):casillaTablero
    + setCasilla(n:int, m:int, casilla:casillaTablero)
    + getNumeroCasillasN():int
    + getNumeroCasillasM():int
}

class Datamodel {}
class DataModelProperties {}
class vistas {
    --
    cargarJuego-vista
    casilla-vista
    elementoCasillasBox-vista
    menuConfiguracionInicio-vista
    menuConfiguracionPausa-vista
    tablero-vista
}
class controladores {
    casillaController
    menuConfiguracionController
    menuPrincipalController
    tableroController
}
class menuPrincipalApplication {}

DataModelProperties --> Datamodel
controladores --> Datamodel
Datamodel --> vistas
vistas --> controladores
controladores --> vistas
menuPrincipalApplication --> Datamodel

class menuPrincipalApplication {
    --
    +start
}
class menuPrincipalController {
    -listaDeFicheros
    --
    # onBotonNuevoClick
    # onBotonCargarPartidaClick
    # onBotonVolverMenuClick
    # onBotonCargarFicheroClick
    - getNombreFicheros
    + initialize
}
class menuPrincipalvista {}
class simuladorDeVida {}
class menuConfiguracionController {
    --
    #updateGUIWithModel
    #initializeSpinners
    -añadirFiltroSpinner
    #onBotonGuardarClick
    -continuarJuego
    -empezarNuevoJuego
    #onBotonReiniciarClick
    #onBotonVolverClick
    +initialize
    -initializeControllers
}
class menuConfiguracionInicioVista {}
class menuConfiguracionPausaVista {}
class tableroController {
    - juegoActual: simuladorDeVida
    --
    # onBotonPausaClick
    # onBotonReanudarClick
    # onBotonPasarTurnoClick
    -avanzarJuego
    # onBotonConfiguracionClick
    #onBotonCerrarClick
    #onBotonPantallaCompletaClick
    #onBotonMinimizarClick
    #onBotonMenuPrincipalClick
    -volverAlMenuPrincipal
    #onBotonGuardarPartidaClick
    #onBotonGuardarComoClick
    #guardarPartida
    #guardarComo
    #mostrarElementosCasilla
    #crearTablero
    -crearGridTablero
}
class tableroVista {}
class casillaController {
    - casillaActual
    --
    +añadirIndividuo
    -añadirIndividuoAux
    +eliminarIndividuo
    +añadirRecurso
    -añadirRecursoAux
    +eliminarRecurso
}
class casillaVista {}
class simuladorDeVida {
    -tablero
    -bucle
    --
    +comenzar
}
class tablero {
    -casillas
}
class bucleDeControl {
    -tablero
    -individuos
    -recursos
    --
    +run
    -ejecutarBucle
}
class casillaTablero {
    -tablero
    -individuos
    -recursos
    --
    +addIndividuo
    -addIconoIndividuo
    +delIndividuo
    +addRecurso
    -addIconoRecurso
    +delRecurso
    +resetVisual
}
class individuos {}
class recursos {}
class cargarJuegoVista {}
class elementoCasillaBoxVista {}

menuPrincipalController --> cargarJuegoVista :onBotonCargarPartidaClick
cargarJuegoVista --> menuPrincipalController: onBotonVolverMenuClick
menuPrincipalApplication --> menuPrincipalController :start
menuPrincipalController --> menuConfiguracionController :onBotonNuevoClick
menuPrincipalController --> menuPrincipalvista
menuPrincipalvista --> menuPrincipalController
menuConfiguracionInicioVista --> menuConfiguracionController
menuConfiguracionController --> menuConfiguracionInicioVista
menuConfiguracionController --> menuConfiguracionPausaVista
menuConfiguracionPausaVista --> menuConfiguracionController
tableroController --> simuladorDeVida
tableroVista --> tableroController
tableroController --> tableroVista
casillaController --> casillaVista
casillaVista --> casillaController
simuladorDeVida --> tablero
simuladorDeVida --> bucleDeControl
bucleDeControl --> tablero
tablero --> casillaTablero
casillaTablero --> tablero
casillaTablero --> individuos
casillaTablero --> recursos
menuConfiguracionController --> tableroController :onBotonGuardarClick
tableroController --> menuConfiguracionController: onBotonConfiguracionClick
tableroController --> casillaController :mostrarElementosCasilla
casillaController --> tableroController
casillaTablero --> elementoCasillaBoxVista
elementoCasillaBoxVista --> casillaTablero
casillaVista --> elementoCasillaBoxVista
menuPrincipalController --> tableroController : onBotonCargarFicheroClick
menuConfiguracionController --> menuPrincipalController: onBotonVolverClick
tableroController --> menuPrincipalController: #onBotonMenuPrincipalClick
casillaController --> casillaTablero
casillaController --> individuos
casillaController --> recursos
bucleDeControl --> individuos
bucleDeControl --> recursos

'autonumber
actor Usuario
participant Main
participant MainWindowController
participant TableroController
participant FXMLLoader
participant Scene
participant Stage

Usuario -> Main: main(String[] args)
activate Main
Main -> Main: launch()

activate Main
Main -> Main: start(Stage stage)
activate Main
Main -> FXMLLoader: FXMLLoader.load(Main.class.getResource("juego-view.fxml"))
activate FXMLLoader
Main -> Scene: new Scene(fxmlLoader.load(), 1300, 650)
activate Scene
Main -> Stage: stage.setTitle("JUEGO DE LA VIDA")
Main -> Stage: stage.setScene(scene)
Main -> Stage: stage.show()
deactivate Scene
deactivate FXMLLoader
deactivate Main

Usuario -> MainWindowController: onIniciarPartidaButtonClick()
activate MainWindowController
MainWindowController -> FXMLLoader: FXMLLoader.load(Main.class.getResource("parametrizar-view.fxml"))
activate FXMLLoader
MainWindowController -> Scene: new Scene(fxmlLoader.load())
activate Scene
MainWindowController -> Stage: stage.setTitle("Parametros")
MainWindowController -> Stage: stage.setScene(scene)
MainWindowController -> ParametersController: parametersController.loadUserData()
MainWindowController -> ParametersController: parametersController.setStage(stage)
MainWindowController -> ParametersController: parametersController.setOpenedFromMainWindow(true)
MainWindowController -> ParametersController: parametersController.setPrevStage(this.scene)
MainWindowController -> Stage: stage.show()
MainWindowController -> Stage: this.scene.close()
deactivate Scene
deactivate FXMLLoader
deactivate MainWindowController

Usuario -> MainWindowController: onCargarPartidaButtonClick()
activate MainWindowController
MainWindowController -> FXMLLoader: FXMLLoader.load(Main.class.getResource("tablero-view.fxml"))
activate FXMLLoader
MainWindowController -> Scene: new Scene(fxmlLoader.load(), 600, 400)
activate Scene
MainWindowController -> Stage: stage.setTitle("Tablero")
MainWindowController -> Stage: stage.setScene(scene)
MainWindowController -> Stage: stage.show()
deactivate Scene
deactivate FXMLLoader
deactivate MainWindowController

Usuario -> TableroController: onPlayButtonClick()
activate TableroController
TableroController -> Timeline: timeline.play()
deactivate TableroController

Usuario -> TableroController: onPauseButtonClick()
activate TableroController
TableroController -> Timeline: timeline.pause()
deactivate TableroController

Usuario -> TableroController: onStopButtonClick()
activate TableroController
TableroController -> Timeline: timeline.stop()
deactivate TableroController

@enduml