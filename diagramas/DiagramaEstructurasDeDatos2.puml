@startuml
'https://plantuml.com/class-diagram



package estructurasDeDatos.listaDoblementeEnlazada {
    class ElementoLDE<TipoDeDatos> {
        - TipoDeDatos data
        - ElementoLDE<TipoDeDatos> siguiente
        - ElementoLDE<TipoDeDatos> anterior
        + ElementoLDE(ElementoLDE<TipoDeDatos> anterior)
        + ElementoLDE(ElementoLDE<TipoDeDatos> anterior, ElementoLDE<TipoDeDatos> siguiente, TipoDeDatos data)
        + ElementoLDE(TipoDeDatos data)
        + ElementoLDE()
        + void insertarmeEn(ElementoLDE<TipoDeDatos> el)
        + ElementoLDE<TipoDeDatos> getSiguiente()
        + ElementoLDE<TipoDeDatos> getAnterior()
        + void setSiguiente(ElementoLDE<TipoDeDatos> el)
        + void setAnterior(ElementoLDE<TipoDeDatos> el)
        + TipoDeDatos getData()
        + void setData(TipoDeDatos dato)
    }
    class ListaDoblementeEnlazada<TipoDeDatos> {
        - static Logger log
        - ElementoLDE<TipoDeDatos> primero
        - ElementoLDE<TipoDeDatos> ultimo
        + ListaDoblementeEnlazada()
        + Boolean isVacia()
        + void vaciar()
        + int add(ElementoLDE<TipoDeDatos> el)
        + void add(TipoDeDatos o)
        + void insert(TipoDeDatos o, int posicion)
        + int del(int posicion)
        + void del(TipoDeDatos elemento)
        + int getNumeroElementos()
        + int getPosicion(ElementoLDE<TipoDeDatos> e)
        + ElementoLDE<TipoDeDatos> getPrimero()
        + ElementoLDE<TipoDeDatos> getUltimo()
        + ElementoLDE<TipoDeDatos> getSiguiente(ElementoLDE<TipoDeDatos> el)
        + ElementoLDE<TipoDeDatos> getElemento(int posicion)
        + void setElemento(int posicion, TipoDeDatos elemento)
        + String toString()
        + String toStringAux(ElementoLDE<TipoDeDatos> n, String salida)
    }
}

package estructurasDeDatos.listaEnlazada {
    class ElementoLE<TipoDeDatos> {
        @Expose
        - TipoDeDatos data
        @Expose
        - ElementoLE<TipoDeDatos> siguiente

        + ElementoLE(TipoDeDatos dato)
        + ElementoLE(TipoDeDatos dato, ElementoLE<TipoDeDatos> siguiente)
        + ElementoLE()
        + void setSiguiente(ElementoLE<TipoDeDatos> siguiente)
        + void insertarmeEn(ElementoLE<TipoDeDatos> el)
        + ElementoLE<TipoDeDatos> getSiguiente()
        + TipoDeDatos getData()
        + void setData(TipoDeDatos data)
    }
    class ListaEnlazada<TipoDeDatos> {
        - static Logger log
        - ElementoLE<TipoDeDatos> primero

        + ListaEnlazada(ElementoLE<TipoDeDatos> primero)
        + ListaEnlazada()
        + boolean isVacia()
        + void vaciar()
        + ElementoLE<TipoDeDatos> getPrimero()
        + ElementoLE<TipoDeDatos> getUltimo()
        + ElementoLE<TipoDeDatos> getElemento(int posicion)
        + int getNumeroElementos()
        + Integer getPosicion(ElementoLE<TipoDeDatos> el)
        + Integer getPosicion(TipoDeDatos el)
        + ElementoLE<TipoDeDatos> getSiguiente(ElementoLE<TipoDeDatos> el)
        + void add(TipoDeDatos dato)
        + void insert(TipoDeDatos objeto, int posicion)
        + int delete(int pos)
        + void del(TipoDeDatos el)
        + ListaEnlazada<TipoDeDatos> reverse(ListaEnlazada<TipoDeDatos> lista)
        + String toString()
        + String toStrings(ElementoLE<TipoDeDatos> n)
    }
}

package estructurasDeDatos.listaSimple {
    class ElementoLS<TipoDeDatos> {
        - TipoDeDatos data

        + ElementoLS(TipoDeDatos dato)
        + ElementoLS()
        + TipoDeDatos getData()
        + void setData(TipoDeDatos a)
    }
    class GsonListaSimple {
        + JsonElement serialize(ListaSimple src, Type typeOfSrc, JsonSerializationContext context)
        + ListaSimple deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
    }
    class ListaSimple<TipoDedatos> {
        - ElementoLS<TipoDedatos>[] datos
        - int maximo

        + ListaSimple()
        + ListaSimple(int maximo)
        + boolean isVacia()
        + void vaciar()
        + int getMaximo()
        + void setMaximo(int maximo)
        # ElementoLS<TipoDedatos>[] getDatos()
        # void setDatos(ElementoLS<TipoDedatos>[] datos)
        + ElementoLS<TipoDedatos> getPrimero()
        + ElementoLS<TipoDedatos> getUltimo()
        + ElementoLS<TipoDedatos> getElemento(int posicion)
        + void setElemento(int posicion, TipoDedatos elemento)
        + int getNumeroElementos()
        # ElementoLS<TipoDedatos> getSiguiente(ElementoLS<TipoDedatos> el)
        + int getPosicion(ElementoLS<TipoDedatos> el)
        + int add(ElementoLS<TipoDedatos> el)
        + void add(TipoDedatos o)
        + void insert(TipoDedatos o, int posicion)
        + int del(int posicion)
    }
}

package estructurasDeDatos.OtrasEstructuras {
    class Cola<TipoDeDatos> {
        - ListaEnlazada<TipoDeDatos> datos

        + Cola()
        + Boolean isVacia()
        + ListaEnlazada<TipoDeDatos> getDatos()
        + void setDatos(ListaEnlazada<TipoDeDatos> datos)
        + void add(TipoDeDatos e)
        + TipoDeDatos poll()
        + TipoDeDatos peek()
        + int getNumeroDatos()
        + String toString()
    }
    class GsonCola {
        - static Logger log

        + JsonElement serialize(Cola src, Type typeOfSrc, JsonSerializationContext context)
        + Cola deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
    }

}

ElementoLDE --> Logger
ListaDoblementeEnlazada --> ElementoLDE
ListaDoblementeEnlazada --> Logger

ElementoLE --> Logger
ListaEnlazada --> ElementoLE
ListaEnlazada --> Logger

ElementoLS --> Logger
ListaSimple --> ElementoLS
ListaSimple --> Logger

Cola --> ListaEnlazada
Cola --> Logger

class Logger {
    + trace(String message): void
    + debug(String message): void
    + info(String message): void
    + warn(String message): void
    + error(String message): void
    + fatal(String message): void
}

@enduml
