@startuml
'https://plantuml.com/class-diagram

package estudiante {
    abstract class Estudiante {
        @Expose
        - int posicionN
        - int posicionM
        - int id
        - int generacion
        - int tiempoDeVida
        - double probReproduccion
        - double probClonacion
        - double probMuerte
        - boolean isVivo
        - Cola colaDeOperaciones
        - IntegerProperty tiempoDeVidaProperty
        - ListaSimple padres
        - static Logger log
        + Estudiante(id: int, posicionN: int, posicionM: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + Estudiante(id: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + Estudiante()
        + Estudiante(estudiante: Estudiante)
        + int getPosicionN()
        + void setPosicionN(posicionN: int): void
        + int getPosicionM()
        + void setPosicionM(posicionM: int): void
        + int[] getPosicion()
        + void setPosicion(posicion: int[]): void
        + Integer getId()
        + void setId(id: int): void
        + int getGeneracion()
        + void setGeneracion(generacion: int): void
        + int getTiempoDeVida()
        + void setTiempoDeVida(tiempoDeVida: int, turno: int): void
        + double getProbReproduccion()
        + void setProbReproduccion(probReproduccion: double, turno: int): void
        + double getProbClonacion()
        + void setProbClonacion(probClonacion: double, turno: int): void
        + double getProbMuerte()
        + IntegerProperty getTiempoDeVidaProperty()
        + void setTiempoDeVidaProperty(tiempoDeVidaProperty: IntegerProperty): void
        + void addOperacion(operacion: String): void
        + ListaSimple<Estudiante> getPadres()
        + void setPadres(padre1: Estudiante, padre2: Estudiante): void
        + void setPadres(padres: ListaSimple<Estudiante>): void
        + void actualizarTiempoDeVidaProperty(): void
        + boolean isVivo()
        + abstract Class<?> getTipo()
        + int getNumTipo()
        + void add(dato: DatosJuego, celda: Celda): void
        + void morir(dato: DatosJuego, celda: Celda): void
        + abstract void mover(dato: DatosJuego, tablero: Tablero)
        + void cambiarDePosicion(nuevaPosicionN: int, nuevaPosicionM: int, tablero: Tablero): void
        + void moverseAleatorio(tablero: Tablero, turno: int): void
        + <TipoDeDatos extends Estudiante> boolean reproducirse(pareja: Estudiante, dato: DatosJuego, celda: Celda, turno: int): boolean
        + void clonar(dato: DatosJuego, celda: Celda): void
        + boolean actualizarTiempoDeVida(celda: Celda, turno: int): boolean
        + Cola<String> getColaDeOperaciones()
        + void setColaOperaciones(colaDeOperaciones: Cola<String>): void
    }

    class EstudianteAvanzado extends Estudiante {
        + EstudianteAvanzado(estudiante: Estudiante)
        + EstudianteAvanzado(id: int, posicionN: int, posicionM: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + EstudianteAvanzado(id: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + EstudianteAvanzado()
        + Class<EstudianteAvanzado> getTipo()
        + void mover(dato: DatosJuego, tablero: Tablero): void
    }

    class EstudianteBasico extends Estudiante {
        + EstudianteBasico(estudiante: Estudiante)
        + EstudianteBasico(id: int, posicionN: int, posicionM: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + EstudianteBasico(id: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + EstudianteBasico()
        + Class<EstudianteBasico> getTipo()
        + void mover(dato: DatosJuego, tablero: Tablero): void
    }

    class EstudianteNormal extends Estudiante {
        + EstudianteNormal(estudiante: Estudiante)
        + EstudianteNormal(id: int, posicionN: int, posicionM: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + EstudianteNormal(id: int, generacion: int, tiempoDeVida: int, probReproduccion: double, probClonacion: double, turno: int)
        + EstudianteNormal()
        + Class<EstudianteNormal> getTipo()
        + void mover(dato: DatosJuego, tablero: Tablero): void
    }

    class EstudianteProperties {
        - Estudiante origen
        - IntegerProperty tiempoDeVida
        - DoubleProperty probReproduccion
        - DoubleProperty probClonacion
        - DoubleProperty probMuerte
        - int turno
        + EstudianteProperties(origen: Estudiante)
        + EstudianteProperties()
        + Estudiante getOrigen()
        + void setOrigen(origen: Estudiante)
        + void rollback()
        + void commit()
        + IntegerProperty tiempoDeVidaProperty()
        + DoubleProperty probReproduccionProperty()
        + DoubleProperty probClonacionProperty()
        + DoubleProperty probMuerteProperty()
        + int getTurno()
    }

    class GsonEstudiante {
        - static Logger log
        + serialize(src: Estudiante, typeOfSrc: Type, context: JsonSerializationContext): JsonElement
        + deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): Estudiante
    }
}


@enduml