@startuml
'https://plantuml.com/class-diagram

package estructurasDeDatos.grafo {
    class Arista<TipoDeDatos> {
        - NodoGrafo<TipoDeDatos> nodoIni
        - NodoGrafo<TipoDeDatos> nodoFin
        - String anotacion
        - boolean isDirigido
        - double peso
        - static Logger log
        + Arista()
        + Arista(double peso)
        + Arista(String anotacion)
        + Arista(double peso, NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin, boolean isDirigido)
        + Arista(double peso, NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin, String anotacion, boolean isDirigido)
        + boolean isDirigido()
        + void setDirigido(boolean dirigido)
        + NodoGrafo<TipoDeDatos> getNodoIni()
        + void setNodoIni(NodoGrafo<TipoDeDatos> nodoIni)
        + NodoGrafo<TipoDeDatos> getNodoFin()
        + void setNodoFin(NodoGrafo<TipoDeDatos> nodoFin)
        + String getAnotacion()
        + void setAnotacion(String anotacion)
        + double getPeso()
        + void setPeso(double peso)
        + NodoGrafo<TipoDeDatos> getVertice(NodoGrafo<TipoDeDatos> vertice)
    }
    class Camino<TipoDeDatos> {
        - ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> camino
        - double peso
        + Camino(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> camino, double peso)
        + double getPeso()
        + ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> getCamino()
        + String toString()
    }
    class ElementoMap<T, E> {
        - T clave
        - E dato
        + ElementoMap(T clave, E dato)
        + T getClave()
        + void setClave(T clave)
        + E getDato()
        + void setDato(E dato)
    }
    class Grafo<TipoDeDatos> {
        - ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> nodos
        - ListaDoblementeEnlazada<Arista<TipoDeDatos>> aristas
        - boolean isDirigido
        - static Logger log
        + Grafo()
        + Grafo(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> nodos, ListaDoblementeEnlazada<Arista<TipoDeDatos>> aristas)
        + Grafo(boolean isDirigido)
        + ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> getNodos()
        + void setNodos(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> nodos)
        + ListaDoblementeEnlazada<Arista<TipoDeDatos>> getAristas()
        + void setAristas(ListaDoblementeEnlazada<Arista<TipoDeDatos>> aristas)
        + boolean isDirigido()
        + void setDirigido(boolean dirigido)
        + void addNodo(NodoGrafo<TipoDeDatos> nodo)
        + void addNodo(TipoDeDatos dato)
        + void addNodo(NodoGrafo<TipoDeDatos> nodo, NodoGrafo<TipoDeDatos> nodo2, double pesoArco)
        + void addArista(double peso, TipoDeDatos datoIni, TipoDeDatos datoFin, String anotacion)
        + void addArista(double peso, NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin)
        + void addArista(double peso, TipoDeDatos datoIni, TipoDeDatos datoFin)
        + void delNodo(TipoDeDatos dato)
        + void delArista(String anotacion)
        + NodoGrafo<TipoDeDatos> getNodoGrafo(TipoDeDatos dato)
        + Arista<TipoDeDatos> getArista(String anotacion)
        + Camino<TipoDeDatos> getCaminoMinimo(NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin)
        + Mapa<NodoGrafo<TipoDeDatos>, Camino<TipoDeDatos>> dijkstra(NodoGrafo<TipoDeDatos> nodoIni)
        + String listaToString(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> lista)
    }
    class Mapa<T, E> {
        - ListaDoblementeEnlazada<ElementoMap<T, E>> datos
        + Mapa(ListaDoblementeEnlazada<ElementoMap<T, E>> el)
        + Mapa()
        + boolean isVacio()
        + E get(T clave)
        + ListaDoblementeEnlazada<T> SetClave()
        + void put(T clave, E elemento)
        + void eliminar(T clave)
    }
    class NodoGrafo<TipoDelDato> {
        - TipoDelDato dato
        - ListaDoblementeEnlazada<Arista<TipoDelDato>> listaEntrada
        - ListaDoblementeEnlazada<Arista<TipoDelDato>> listaSalida
        - String anotacion
        - double peso
        + NodoGrafo(TipoDelDato dato)
        + NodoGrafo(TipoDelDato dato, ListaDoblementeEnlazada<Arista<TipoDelDato>> listaEntrada, ListaDoblementeEnlazada<Arista<TipoDelDato>> listaSalida)
        + TipoDelDato getDato()
        + void setDato(TipoDelDato dato)
        + ListaDoblementeEnlazada<Arista<TipoDelDato>> getListaEntrada()
        + void setListaEntrada(ListaDoblementeEnlazada<Arista<TipoDelDato>> listaEntrada)
        + ListaDoblementeEnlazada<Arista<TipoDelDato>> getListaSalida()
        + void setListaSalida(ListaDoblementeEnlazada<Arista<TipoDelDato>> listaSalida)
        + String getAnotacion()
        + void setAnotacion(String anotacion)
        + double getPeso()
        + void setPeso(double peso)
    }
}

Arista --> NodoGrafo
Arista --> ListaDoblementeEnlazada
Arista --> Logger

Camino --> ListaDoblementeEnlazada

ElementoMap --> Logger

Grafo --> NodoGrafo
Grafo --> Arista
Grafo --> Mapa

NodoGrafo --> Arista
NodoGrafo --> ListaDoblementeEnlazada
NodoGrafo --> Logger

class Logger {
    + trace(String message): void
    + debug(String message): void
    + info(String message): void
    + warn(String message): void
    + error(String message): void
    + fatal(String message): void
}

@enduml