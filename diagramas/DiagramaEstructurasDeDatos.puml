@startuml
'https://plantuml.com/class-diagram

package estructurasDeDatos.arbolAVL {
    class ArbolAVL<TipoDeDatos> {
        - NodoAVL<TipoDeDatos> raiz
        - static Logger log
        + ArbolAVL()
        + ArbolAVL(TipoDeDatos raiz)
        + ArbolAVL(NodoAVL<TipoDeDatos> nodo)
        + NodoAVL<TipoDeDatos> getRaiz()
        + ArbolAVL<TipoDeDatos> getSubArbolIzq()
        + ArbolAVL<TipoDeDatos> getSubArbolDcha()
        + int getGradoN(NodoAVL<TipoDeDatos> nodo)
        + int getAltura()
        + int getAlturaN(NodoAVL<TipoDeDatos> nodo)
        - void actAltura(NodoAVL<TipoDeDatos> nodo)
        + ListaDoblementeEnlazada<TipoDeDatos> preOrden()
        + ListaDoblementeEnlazada<TipoDeDatos> getPreOrden(NodoAVL<TipoDeDatos> nodoAVL, ListaDoblementeEnlazada<TipoDeDatos> lista)
        + ListaDoblementeEnlazada<TipoDeDatos> ordenCentral()
        + ListaDoblementeEnlazada<TipoDeDatos> getOrdenCentral(NodoAVL<TipoDeDatos> nodoAVL, ListaDoblementeEnlazada<TipoDeDatos> lista)
        + ListaDoblementeEnlazada<TipoDeDatos> postOrden()
        + ListaDoblementeEnlazada<TipoDeDatos> getPostOrden(NodoAVL<TipoDeDatos> nodoAVL, ListaDoblementeEnlazada<TipoDeDatos> lista)
        - NodoAVL<TipoDeDatos> rotar_s(NodoAVL<TipoDeDatos> raiz, Boolean izq)
        - NodoAVL<TipoDeDatos> rotar_d(NodoAVL<TipoDeDatos> raiz, Boolean izq)
        + void balanceo()
        + void add(TipoDeDatos dato)
        + void add(NodoAVL<TipoDeDatos> nuevoNodoAVL)
        + void addAux(NodoAVL<TipoDeDatos> raiz, NodoAVL<TipoDeDatos> dato)
        + void del(TipoDeDatos dato)
        - NodoAVL<TipoDeDatos> delAux1(NodoAVL<TipoDeDatos> raiz, TipoDeDatos dato)
        - NodoAVL<TipoDeDatos> delAux2(NodoAVL<TipoDeDatos> raiz)
        + ListaDoblementeEnlazada<NodoAVL<TipoDeDatos>> getcamino(TipoDeDatos dato)
        - ListaDoblementeEnlazada<NodoAVL<TipoDeDatos>> getCaminoPrinc(NodoAVL<TipoDeDatos> raiz, TipoDeDatos dato, ListaDoblementeEnlazada<NodoAVL<TipoDeDatos>> camino)
    }

    class NodoAVL<TipoDeDatos> {
        - NodoAVL<TipoDeDatos> izquierda
        - NodoAVL<TipoDeDatos> derecha
        - int altura
        + NodoAVL()
        + NodoAVL(TipoDeDatos dato)
        + NodoAVL<TipoDeDatos> getIzquierda()
        + void setIzquierda(NodoAVL<TipoDeDatos> izquierda)
        + NodoAVL<TipoDeDatos> getDerecha()
        + void setDerecha(NodoAVL<TipoDeDatos> derecha)
        + int getAltura()
        + void setAltura(int altura)
    }
}

package estructurasDeDatos.ArbolDeBusqueda {
    class BST<TipoDeDatos> {
        - Nodo<TipoDeDatos> raiz
        + BST(Nodo<TipoDeDatos> raiz, Nodo<TipoDeDatos> derecha, Nodo<TipoDeDatos> izquierda)
        + BST(Nodo<TipoDeDatos> raiz)
        + BST()
        + BST(TipoDeDatos dato)
        + void add(TipoDeDatos dato)
        + void add(Nodo<TipoDeDatos> nodo)
        + int getGradoN(Nodo<TipoDeDatos> n)
        + int getGrado()
        + ListaDoblementeEnlazada<Nodo<TipoDeDatos>> getCamino(TipoDeDatos dato)
        + BST<TipoDeDatos> getSubArbolDcha()
        + BST<TipoDeDatos> getSubArbolIzq()
        + ListaDoblementeEnlazada<TipoDeDatos> preOrden()
        + ListaDoblementeEnlazada<TipoDeDatos> ordenCentral()
        + ListaDoblementeEnlazada<TipoDeDatos> postOrden()
        + int getAlturaN(Nodo<TipoDeDatos> nodo)
        + int getAltura()
        + ListaDoblementeEnlazada<Nodo<TipoDeDatos>> getDatos(int nivel)
        + Boolean isArbolHomogeneo()
        + Boolean isArbolCompleto()
        + Boolean isArbolCasiCompleto()
        + Nodo<TipoDeDatos> getRaiz()
    }
    class Nodo<TipoDelDato> {
        - Nodo<TipoDelDato> derecha
        - Nodo<TipoDelDato> izquierda
        - TipoDelDato dato
        + Nodo(Nodo<TipoDelDato> derecha, Nodo<TipoDelDato> izquierda, TipoDelDato dato)
        + Nodo(TipoDelDato dato)
        + Nodo()
        + Nodo<TipoDelDato> getDerecha()
        + void setDerecha(Nodo<TipoDelDato> derecha)
        + Nodo<TipoDelDato> getIzquierda()
        + void setIzquierda(Nodo<TipoDelDato> izquierda)
        + TipoDelDato getDato()
        + void setDato(TipoDelDato dato)
    }
}

package estructurasDeDatos.grafo {
    class Arista<TipoDeDatos> {
        - NodoGrafo<TipoDeDatos> nodoIni
        - NodoGrafo<TipoDeDatos> nodoFin
        - String anotacion
        - boolean isDirigido
        - double peso
        - static Logger log
        + Arista()
        + Arista(double peso)
        + Arista(String anotacion)
        + Arista(double peso, NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin, boolean isDirigido)
        + Arista(double peso, NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin, String anotacion, boolean isDirigido)
        + boolean isDirigido()
        + void setDirigido(boolean dirigido)
        + NodoGrafo<TipoDeDatos> getNodoIni()
        + void setNodoIni(NodoGrafo<TipoDeDatos> nodoIni)
        + NodoGrafo<TipoDeDatos> getNodoFin()
        + void setNodoFin(NodoGrafo<TipoDeDatos> nodoFin)
        + String getAnotacion()
        + void setAnotacion(String anotacion)
        + double getPeso()
        + void setPeso(double peso)
        + NodoGrafo<TipoDeDatos> getVertice(NodoGrafo<TipoDeDatos> vertice)
    }
    class Camino<TipoDeDatos> {
        - ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> camino
        - double peso
        + Camino(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> camino, double peso)
        + double getPeso()
        + ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> getCamino()
        + String toString()
    }
    class ElementoMap<T, E> {
        - T clave
        - E dato
        + ElementoMap(T clave, E dato)
        + T getClave()
        + void setClave(T clave)
        + E getDato()
        + void setDato(E dato)
    }
    class Grafo<TipoDeDatos> {
        - ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> nodos
        - ListaDoblementeEnlazada<Arista<TipoDeDatos>> aristas
        - boolean isDirigido
        - static Logger log
        + Grafo()
        + Grafo(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> nodos, ListaDoblementeEnlazada<Arista<TipoDeDatos>> aristas)
        + Grafo(boolean isDirigido)
        + ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> getNodos()
        + void setNodos(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> nodos)
        + ListaDoblementeEnlazada<Arista<TipoDeDatos>> getAristas()
        + void setAristas(ListaDoblementeEnlazada<Arista<TipoDeDatos>> aristas)
        + boolean isDirigido()
        + void setDirigido(boolean dirigido)
        + void addNodo(NodoGrafo<TipoDeDatos> nodo)
        + void addNodo(TipoDeDatos dato)
        + void addNodo(NodoGrafo<TipoDeDatos> nodo, NodoGrafo<TipoDeDatos> nodo2, double pesoArco)
        + void addArista(double peso, TipoDeDatos datoIni, TipoDeDatos datoFin, String anotacion)
        + void addArista(double peso, NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin)
        + void addArista(double peso, TipoDeDatos datoIni, TipoDeDatos datoFin)
        + void delNodo(TipoDeDatos dato)
        + void delArista(String anotacion)
        + NodoGrafo<TipoDeDatos> getNodoGrafo(TipoDeDatos dato)
        + Arista<TipoDeDatos> getArista(String anotacion)
        + Camino<TipoDeDatos> getCaminoMinimo(NodoGrafo<TipoDeDatos> nodoIni, NodoGrafo<TipoDeDatos> nodoFin)
        + Mapa<NodoGrafo<TipoDeDatos>, Camino<TipoDeDatos>> dijkstra(NodoGrafo<TipoDeDatos> nodoIni)
        + String listaToString(ListaDoblementeEnlazada<NodoGrafo<TipoDeDatos>> lista)
    }
    class Mapa<T, E> {
        - ListaDoblementeEnlazada<ElementoMap<T, E>> datos
        + Mapa(ListaDoblementeEnlazada<ElementoMap<T, E>> el)
        + Mapa()
        + boolean isVacio()
        + E get(T clave)
        + ListaDoblementeEnlazada<T> SetClave()
        + void put(T clave, E elemento)
        + void eliminar(T clave)
    }
    class NodoGrafo<TipoDelDato> {
        - TipoDelDato dato
        - ListaDoblementeEnlazada<Arista<TipoDelDato>> listaEntrada
        - ListaDoblementeEnlazada<Arista<TipoDelDato>> listaSalida
        - String anotacion
        - double peso
        + NodoGrafo(TipoDelDato dato)
        + NodoGrafo(TipoDelDato dato, ListaDoblementeEnlazada<Arista<TipoDelDato>> listaEntrada, ListaDoblementeEnlazada<Arista<TipoDelDato>> listaSalida)
        + TipoDelDato getDato()
        + void setDato(TipoDelDato dato)
        + ListaDoblementeEnlazada<Arista<TipoDelDato>> getListaEntrada()
        + void setListaEntrada(ListaDoblementeEnlazada<Arista<TipoDelDato>> listaEntrada)
        + ListaDoblementeEnlazada<Arista<TipoDelDato>> getListaSalida()
        + void setListaSalida(ListaDoblementeEnlazada<Arista<TipoDelDato>> listaSalida)
        + String getAnotacion()
        + void setAnotacion(String anotacion)
        + double getPeso()
        + void setPeso(double peso)
    }
}

package estructurasDeDatos.listaDoblementeEnlazada {
    class ElementoLDE<TipoDeDatos> {
        - TipoDeDatos data
        - ElementoLDE<TipoDeDatos> siguiente
        - ElementoLDE<TipoDeDatos> anterior
        + ElementoLDE(ElementoLDE<TipoDeDatos> anterior)
        + ElementoLDE(ElementoLDE<TipoDeDatos> anterior, ElementoLDE<TipoDeDatos> siguiente, TipoDeDatos data)
        + ElementoLDE(TipoDeDatos data)
        + ElementoLDE()
        + void insertarmeEn(ElementoLDE<TipoDeDatos> el)
        + ElementoLDE<TipoDeDatos> getSiguiente()
        + ElementoLDE<TipoDeDatos> getAnterior()
        + void setSiguiente(ElementoLDE<TipoDeDatos> el)
        + void setAnterior(ElementoLDE<TipoDeDatos> el)
        + TipoDeDatos getData()
        + void setData(TipoDeDatos dato)
    }
    class ListaDoblementeEnlazada<TipoDeDatos> {
        - static Logger log
        - ElementoLDE<TipoDeDatos> primero
        - ElementoLDE<TipoDeDatos> ultimo
        + ListaDoblementeEnlazada()
        + Boolean isVacia()
        + void vaciar()
        + int add(ElementoLDE<TipoDeDatos> el)
        + void add(TipoDeDatos o)
        + void insert(TipoDeDatos o, int posicion)
        + int del(int posicion)
        + void del(TipoDeDatos elemento)
        + int getNumeroElementos()
        + int getPosicion(ElementoLDE<TipoDeDatos> e)
        + ElementoLDE<TipoDeDatos> getPrimero()
        + ElementoLDE<TipoDeDatos> getUltimo()
        + ElementoLDE<TipoDeDatos> getSiguiente(ElementoLDE<TipoDeDatos> el)
        + ElementoLDE<TipoDeDatos> getElemento(int posicion)
        + void setElemento(int posicion, TipoDeDatos elemento)
        + String toString()
        + String toStringAux(ElementoLDE<TipoDeDatos> n, String salida)
    }
}

package estructurasDeDatos.listaEnlazada {
    class ElementoLE<TipoDeDatos> {
        @Expose
        - TipoDeDatos data
        @Expose
        - ElementoLE<TipoDeDatos> siguiente

        + ElementoLE(TipoDeDatos dato)
        + ElementoLE(TipoDeDatos dato, ElementoLE<TipoDeDatos> siguiente)
        + ElementoLE()
        + void setSiguiente(ElementoLE<TipoDeDatos> siguiente)
        + void insertarmeEn(ElementoLE<TipoDeDatos> el)
        + ElementoLE<TipoDeDatos> getSiguiente()
        + TipoDeDatos getData()
        + void setData(TipoDeDatos data)
    }
    class ListaEnlazada<TipoDeDatos> {
        - static Logger log
        - ElementoLE<TipoDeDatos> primero

        + ListaEnlazada(ElementoLE<TipoDeDatos> primero)
        + ListaEnlazada()
        + boolean isVacia()
        + void vaciar()
        + ElementoLE<TipoDeDatos> getPrimero()
        + ElementoLE<TipoDeDatos> getUltimo()
        + ElementoLE<TipoDeDatos> getElemento(int posicion)
        + int getNumeroElementos()
        + Integer getPosicion(ElementoLE<TipoDeDatos> el)
        + Integer getPosicion(TipoDeDatos el)
        + ElementoLE<TipoDeDatos> getSiguiente(ElementoLE<TipoDeDatos> el)
        + void add(TipoDeDatos dato)
        + void insert(TipoDeDatos objeto, int posicion)
        + int delete(int pos)
        + void del(TipoDeDatos el)
        + ListaEnlazada<TipoDeDatos> reverse(ListaEnlazada<TipoDeDatos> lista)
        + String toString()
        + String toStrings(ElementoLE<TipoDeDatos> n)
    }
}

package estructurasDeDatos.listaSimple {
    class ElementoLS<TipoDeDatos> {
        - TipoDeDatos data

        + ElementoLS(TipoDeDatos dato)
        + ElementoLS()
        + TipoDeDatos getData()
        + void setData(TipoDeDatos a)
    }
    class GsonListaSimple {
        + JsonElement serialize(ListaSimple src, Type typeOfSrc, JsonSerializationContext context)
        + ListaSimple deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
    }
    class ListaSimple<TipoDedatos> {
        - ElementoLS<TipoDedatos>[] datos
        - int maximo

        + ListaSimple()
        + ListaSimple(int maximo)
        + boolean isVacia()
        + void vaciar()
        + int getMaximo()
        + void setMaximo(int maximo)
        # ElementoLS<TipoDedatos>[] getDatos()
        # void setDatos(ElementoLS<TipoDedatos>[] datos)
        + ElementoLS<TipoDedatos> getPrimero()
        + ElementoLS<TipoDedatos> getUltimo()
        + ElementoLS<TipoDedatos> getElemento(int posicion)
        + void setElemento(int posicion, TipoDedatos elemento)
        + int getNumeroElementos()
        # ElementoLS<TipoDedatos> getSiguiente(ElementoLS<TipoDedatos> el)
        + int getPosicion(ElementoLS<TipoDedatos> el)
        + int add(ElementoLS<TipoDedatos> el)
        + void add(TipoDedatos o)
        + void insert(TipoDedatos o, int posicion)
        + int del(int posicion)
    }
}

package estructurasDeDatos.OtrasEstructuras {
    class Cola<TipoDeDatos> {
        - ListaEnlazada<TipoDeDatos> datos

        + Cola()
        + Boolean isVacia()
        + ListaEnlazada<TipoDeDatos> getDatos()
        + void setDatos(ListaEnlazada<TipoDeDatos> datos)
        + void add(TipoDeDatos e)
        + TipoDeDatos poll()
        + TipoDeDatos peek()
        + int getNumeroDatos()
        + String toString()
    }
    class GsonCola {
        - static Logger log

        + JsonElement serialize(Cola src, Type typeOfSrc, JsonSerializationContext context)
        + Cola deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException
    }

}
GsonCola ..|> JsonSerializer
GsonCola ..|> JsonDeserializer

interface JsonSerializer<T> {
    serialize(src: T, typeOfSrc: Type, context: JsonSerializationContext): JsonElement
}

interface JsonDeserializer<T> {
    deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): T
}

ArbolAVL --> NodoAVL
ArbolAVL --> BST
ArbolAVL --> ListaDoblementeEnlazada


NodoAVL --|> Nodo : Hereda
NodoAVL --> NodoAVL : izquierda
NodoAVL --> NodoAVL : derecha

BST --> Nodo : raiz
BST --> ListaDoblementeEnlazada : usa
BST --> BST : subarbol

Nodo --> Nodo : izquierda
Nodo --> Nodo : derecha

Arista --> NodoGrafo
Arista --> ListaDoblementeEnlazada
Arista --> Logger

Camino --> ListaDoblementeEnlazada

ElementoMap --> Logger

Grafo --> NodoGrafo
Grafo --> Arista
Grafo --> Mapa

NodoGrafo --> Arista
NodoGrafo --> ListaDoblementeEnlazada
NodoGrafo --> Logger

ElementoLDE --> Logger
ListaDoblementeEnlazada --> ElementoLDE
ListaDoblementeEnlazada --> Logger

ElementoLE --> Logger
ListaEnlazada --> ElementoLE
ListaEnlazada --> Logger

ElementoLS --> Logger
ListaSimple --> ElementoLS
ListaSimple --> Logger

Cola --> ListaEnlazada
Cola --> Logger

class Logger {
    + trace(String message): void
    + debug(String message): void
    + info(String message): void
    + warn(String message): void
    + error(String message): void
    + fatal(String message): void
}

@enduml
