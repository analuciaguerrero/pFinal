@startuml
'https://plantuml.com/class-diagram


package estructurasDeDatos.arbolAVL {
    class ArbolAVL<TipoDeDatos> {
        - NodoAVL<TipoDeDatos> raiz
        - static Logger log
        + ArbolAVL()
        + ArbolAVL(TipoDeDatos raiz)
        + ArbolAVL(NodoAVL<TipoDeDatos> nodo)
        + NodoAVL<TipoDeDatos> getRaiz()
        + ArbolAVL<TipoDeDatos> getSubArbolIzq()
        + ArbolAVL<TipoDeDatos> getSubArbolDcha()
        + int getGradoN(NodoAVL<TipoDeDatos> nodo)
        + int getAltura()
        + int getAlturaN(NodoAVL<TipoDeDatos> nodo)
        - void actAltura(NodoAVL<TipoDeDatos> nodo)
        + ListaDoblementeEnlazada<TipoDeDatos> preOrden()
        + ListaDoblementeEnlazada<TipoDeDatos> getPreOrden(NodoAVL<TipoDeDatos> nodoAVL, ListaDoblementeEnlazada<TipoDeDatos> lista)
        + ListaDoblementeEnlazada<TipoDeDatos> ordenCentral()
        + ListaDoblementeEnlazada<TipoDeDatos> getOrdenCentral(NodoAVL<TipoDeDatos> nodoAVL, ListaDoblementeEnlazada<TipoDeDatos> lista)
        + ListaDoblementeEnlazada<TipoDeDatos> postOrden()
        + ListaDoblementeEnlazada<TipoDeDatos> getPostOrden(NodoAVL<TipoDeDatos> nodoAVL, ListaDoblementeEnlazada<TipoDeDatos> lista)
        - NodoAVL<TipoDeDatos> rotar_s(NodoAVL<TipoDeDatos> raiz, Boolean izq)
        - NodoAVL<TipoDeDatos> rotar_d(NodoAVL<TipoDeDatos> raiz, Boolean izq)
        + void balanceo()
        + void add(TipoDeDatos dato)
        + void add(NodoAVL<TipoDeDatos> nuevoNodoAVL)
        + void addAux(NodoAVL<TipoDeDatos> raiz, NodoAVL<TipoDeDatos> dato)
        + void del(TipoDeDatos dato)
        - NodoAVL<TipoDeDatos> delAux1(NodoAVL<TipoDeDatos> raiz, TipoDeDatos dato)
        - NodoAVL<TipoDeDatos> delAux2(NodoAVL<TipoDeDatos> raiz)
        + ListaDoblementeEnlazada<NodoAVL<TipoDeDatos>> getcamino(TipoDeDatos dato)
        - ListaDoblementeEnlazada<NodoAVL<TipoDeDatos>> getCaminoPrinc(NodoAVL<TipoDeDatos> raiz, TipoDeDatos dato, ListaDoblementeEnlazada<NodoAVL<TipoDeDatos>> camino)
    }

    class NodoAVL<TipoDeDatos> {
        - NodoAVL<TipoDeDatos> izquierda
        - NodoAVL<TipoDeDatos> derecha
        - int altura
        + NodoAVL()
        + NodoAVL(TipoDeDatos dato)
        + NodoAVL<TipoDeDatos> getIzquierda()
        + void setIzquierda(NodoAVL<TipoDeDatos> izquierda)
        + NodoAVL<TipoDeDatos> getDerecha()
        + void setDerecha(NodoAVL<TipoDeDatos> derecha)
        + int getAltura()
        + void setAltura(int altura)
    }
}

package estructurasDeDatos.ArbolDeBusqueda {
    class BST<TipoDeDatos> {
        - Nodo<TipoDeDatos> raiz
        + BST(Nodo<TipoDeDatos> raiz, Nodo<TipoDeDatos> derecha, Nodo<TipoDeDatos> izquierda)
        + BST(Nodo<TipoDeDatos> raiz)
        + BST()
        + BST(TipoDeDatos dato)
        + void add(TipoDeDatos dato)
        + void add(Nodo<TipoDeDatos> nodo)
        + int getGradoN(Nodo<TipoDeDatos> n)
        + int getGrado()
        + ListaDoblementeEnlazada<Nodo<TipoDeDatos>> getCamino(TipoDeDatos dato)
        + BST<TipoDeDatos> getSubArbolDcha()
        + BST<TipoDeDatos> getSubArbolIzq()
        + ListaDoblementeEnlazada<TipoDeDatos> preOrden()
        + ListaDoblementeEnlazada<TipoDeDatos> ordenCentral()
        + ListaDoblementeEnlazada<TipoDeDatos> postOrden()
        + int getAlturaN(Nodo<TipoDeDatos> nodo)
        + int getAltura()
        + ListaDoblementeEnlazada<Nodo<TipoDeDatos>> getDatos(int nivel)
        + Boolean isArbolHomogeneo()
        + Boolean isArbolCompleto()
        + Boolean isArbolCasiCompleto()
        + Nodo<TipoDeDatos> getRaiz()
    }
    class Nodo<TipoDelDato> {
        - Nodo<TipoDelDato> derecha
        - Nodo<TipoDelDato> izquierda
        - TipoDelDato dato
        + Nodo(Nodo<TipoDelDato> derecha, Nodo<TipoDelDato> izquierda, TipoDelDato dato)
        + Nodo(TipoDelDato dato)
        + Nodo()
        + Nodo<TipoDelDato> getDerecha()
        + void setDerecha(Nodo<TipoDelDato> derecha)
        + Nodo<TipoDelDato> getIzquierda()
        + void setIzquierda(Nodo<TipoDelDato> izquierda)
        + TipoDelDato getDato()
        + void setDato(TipoDelDato dato)
    }
}

ArbolAVL --> NodoAVL
ArbolAVL --> BST
ArbolAVL --> ListaDoblementeEnlazada


NodoAVL --|> Nodo : Hereda
NodoAVL --> NodoAVL : izquierda
NodoAVL --> NodoAVL : derecha

BST --> Nodo : raiz
BST --> ListaDoblementeEnlazada : usa
BST --> BST : subarbol

Nodo --> Nodo : izquierda
Nodo --> Nodo : derecha


@enduml
